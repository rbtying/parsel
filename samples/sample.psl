main(input[char]) -> (signal) =
    intervalMap(10ms, filterInterval, signalFromWav(input))


filterInterval(interval input) -> interval =
    let freq thing = 1000Hz cutoff(time t) -> freq = envelope(0, 10s, t) * thing
    in applyFilterF with leftRightFilter(cutoff(input.start)), input

leftRightFilter(freq cutoff) -> fsignal = fsignal with
    \(freq f) -> sample = if f < cutoff then (1, 0) else (0, 1)

envelope(time attack, time decay, time t) -> float = 
    if t < attack then
        t / attack
    else if t < decay then
        1 - (t - attack) / decay
    else 0

# maybe library functions
intervalMap(time width, f(interval, time) -> interval, signal input) -> signal =
    merge(width, map(f, chop(width, input)))

applyFilterF(fsignal filter, interval input) -> interval =
    (interval with input.start, input.stop, ft with ft(input) * filter)
